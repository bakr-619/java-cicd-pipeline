name: Java CI/CD Pipeline

on:
  push:
    branches: ["feature/*", "staging", "main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/staging' && github.ref != 'refs/heads/main'  # Run on feature branches and PRs
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Run Unit Tests
        run: mvn test

      - name: Build Docker Image
        run: docker build -t myapp:${{ github.sha }} .

  staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: mvn test

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:staging .

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/myapp:staging'
          format: 'table'
          exit-code: '1'  # Fail on critical vulnerabilities
          severity: 'CRITICAL,HIGH'

      - name: Push to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:staging

      - name: Deploy to Staging (Simulated)
        run: |
          # Replace with real deploy, e.g., ssh to VM or kubectl apply
          docker run -d -p 8080:8080 --name myapp-staging ${{ secrets.DOCKER_USERNAME }}/myapp:staging

      - name: Smoke Test
        run: curl --fail http://localhost:8080/health || exit 1

      - name: Notify Success
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: 'Staging deployment succeeded! Commit: ${{ github.sha }}'

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:stable
          docker stop myapp-staging || true
          docker rm myapp-staging || true
          docker run -d -p 8080:8080 --name myapp-staging ${{ secrets.DOCKER_USERNAME }}/myapp:stable

      - name: Smoke Test After Rollback
        if: failure()
        run: curl --fail http://localhost:8080/health || exit 1

      - name: Notify Rollback
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: 'Staging deployment failed and rolled back! Commit: ${{ github.sha }}'

      - name: Update Stable Tag on Success
        if: success()
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/myapp:staging ${{ secrets.DOCKER_USERNAME }}/myapp:stable
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:stable

  production:
    runs-on: ubuntu-latest
    needs: staging  # Only run if staging succeeds
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: mvn test

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:prod .

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/myapp:prod'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Push to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:prod

      - name: Deploy to Production (Simulated)
        run: |
          # Replace with real deploy, e.g., to Kubernetes: kubectl set image deployment/myapp myapp=${{ secrets.DOCKER_USERNAME }}/myapp:prod
          docker run -d -p 8080:8080 --name myapp-prod ${{ secrets.DOCKER_USERNAME }}/myapp:prod

      - name: Smoke Test
        run: curl --fail http://localhost:8080/health || exit 1

      - name: Notify Success
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: 'Production deployment succeeded! Commit: ${{ github.sha }}'

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:stable
          docker stop myapp-prod || true
          docker rm myapp-prod || true
          docker run -d -p 8080:8080 --name myapp-prod ${{ secrets.DOCKER_USERNAME }}/myapp:stable

      - name: Smoke Test After Rollback
        if: failure()
        run: curl --fail http://localhost:8080/health || exit 1

      - name: Notify Rollback
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: 'Production deployment failed and rolled back! Commit: ${{ github.sha }}'

      - name: Update Stable Tag on Success
        if: success()
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/myapp:prod ${{ secrets.DOCKER_USERNAME }}/myapp:stable
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:stable